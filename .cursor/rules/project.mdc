---
description:
globs:
alwaysApply: true
---
# Azu CLI - Cursor Rules

You are an expert Crystal developer working on the Azu CLI project, a command-line interface for the Azu Toolkit framework.

## Project Context

- **Language**: Crystal
- **Project Type**: CLI Tool / Code Generator
- **Framework**: Azu Toolkit (https://github.com/azutoolkit/azu)
- **ORM**: CQL Orm (https://github.com/azutoolkit/cql) (Remove Jennifer)
- **Build System**: Makefile
- **Version**: 0.0.1+13

## Crystal Language Guidelines

### Code Style
- Use Crystal's built-in formatter (`crystal tool format`)
- Follow Crystal naming conventions:
  - Classes: PascalCase (`MyClass`)
  - Methods/variables: snake_case (`my_method`)
  - Constants: SCREAMING_SNAKE_CASE (`MY_CONSTANT`)
  - Files: snake_case (`my_file.cr`)
- Use 2 spaces for indentation
- Prefer explicit type annotations for public APIs
- Use meaningful variable names, avoid abbreviations

### Crystal-Specific Patterns
- Leverage Crystal's type system and compile-time checks
- Use macros for code generation when appropriate
- Prefer `String.build` for string concatenation
- Use `case/when` instead of multiple `if/elsif`
- Utilize Crystal's union types for flexible APIs
- Use `#as` for type casting when necessary

### Memory Management
- Prefer stack allocation over heap when possible
- Use `StaticArray` for fixed-size arrays
- Be mindful of string interpolation performance
- Use `IO` directly for file operations when performance matters

## CLI Architecture Patterns

### Command Structure
- Each command should be in its own file under `src/commands/`
- Commands should inherit from a base `Command` class if available
- Use the Topia (Topia.cli(ARGV))
- Structure commands as classes with `#call` or `#run` methods

Example command structure:
```crystal
class Azu::Commands::Project < Azu::Commands::Base
  def initialize(@name : String, @options : Hash(String, String))
  end

  def call
    # Command implementation
  end
end
```

### File Generation
- Use ECR (Embedded Crystal) templates for code generation
- Templates should be in `src/templates/` directory
- Separate template logic from command logic
- Use `File.write` with proper error handling
- Create directories with `Dir.mkdir_p`

### Error Handling
- Use Crystal's exception system appropriately
- Provide meaningful error messages to users
- Handle file system errors gracefully
- Use `abort` for fatal CLI errors with descriptive messages
- Log errors to STDERR, not STDOUT

## Project-Specific Guidelines

### Command Implementation
- All commands should provide `--help` option
- Validate user input before processing
- Show progress for long-running operations
- Use consistent exit codes (0 for success, 1+ for errors)
- Support both long and short option formats

### Code Generation Rules
- Generated code should follow Azu framework and CQL Orm conventions
- Use proper indentation and formatting in templates
- Include necessary imports in generated files
- Generate comprehensive directory structures
- Add appropriate file headers and comments

### Database Integration
- Use CQL ORM patterns consistently (https://github.com/azutoolkit/cql)
- Generate proper migration files
- Handle database connection errors
- Support multiple database adapters (PostgreSQL, MySQL, SQLite)
- Use proper Jennifer model conventions

### Development Server
- Implement file watching for auto-recompilation
- Handle process management cleanly
- Provide clear startup/shutdown messages
- Support configurable ports and hosts
- Handle compilation errors gracefully

## File Organization

### Directory Structure
```
./src
├── azu_cli
│   ├── command.cr
│   ├── commands
│   │   ├── db.cr
│   │   ├── dev.cr
│   │   ├── generate.cr
│   │   ├── help.cr
│   │   ├── init.cr
│   │   ├── new.cr
│   │   ├── serve.cr
│   │   ├── topia_adapter.cr
│   │   └── version.cr
│   ├── config.cr
│   ├── generators
│   │   ├── base.cr
│   │   ├── contract.cr
│   │   ├── endpoint.cr
│   │   ├── middleware.cr
│   │   ├── migration.cr
│   │   ├── model.cr
│   │   ├── page.cr
│   │   ├── project.cr
│   │   └── service.cr
│   ├── logger.cr
│   ├── templates
│   │   ├── generators
│   │   │   ├── contract
│   │   │   │   ├── contract_spec.cr.ecr
│   │   │   │   └── contract.cr.ecr
│   │   │   ├── endpoint
│   │   │   │   ├── create_contract.cr.ecr
│   │   │   │   ├── create_endpoint.cr.ecr
│   │   │   │   ├── create_page.cr.ecr
│   │   │   │   ├── destroy_contract.cr.ecr
│   │   │   │   ├── destroy_endpoint.cr.ecr
│   │   │   │   ├── destroy_page.cr.ecr
│   │   │   │   ├── edit_contract.cr.ecr
│   │   │   │   ├── edit_endpoint.cr.ecr
│   │   │   │   ├── edit_page.cr.ecr
│   │   │   │   ├── endpoint_spec.cr.ecr
│   │   │   │   ├── index_contract.cr.ecr
│   │   │   │   ├── index_endpoint.cr.ecr
│   │   │   │   ├── index_page.cr.ecr
│   │   │   │   ├── new_contract.cr.ecr
│   │   │   │   ├── new_endpoint.cr.ecr
│   │   │   │   ├── new_page.cr.ecr
│   │   │   │   ├── show_contract.cr.ecr
│   │   │   │   ├── show_endpoint.cr.ecr
│   │   │   │   ├── show_page.cr.ecr
│   │   │   │   ├── update_contract.cr.ecr
│   │   │   │   ├── update_endpoint.cr.ecr
│   │   │   │   └── update_page.cr.ecr
│   │   │   ├── middleware
│   │   │   │   ├── middleware_spec.cr.ecr
│   │   │   │   └── middleware.cr.ecr
│   │   │   ├── model
│   │   │   │   ├── model_spec.cr.ecr
│   │   │   │   └── model.cr.ecr
│   │   │   ├── page
│   │   │   │   ├── page_spec.cr.ecr
│   │   │   │   ├── page.cr.ecr
│   │   │   │   └── page.jinja.ecr
│   │   │   └── service
│   │   │       ├── service_spec.cr.ecr
│   │   │       └── service.cr.ecr
│   │   ├── hot_reload_client.js
│   │   ├── project
│   │   │   ├── db
│   │   │   ├── LICENSE
│   │   │   ├── public
│   │   │   │   ├── assets
│   │   │   │   │   ├── css
│   │   │   │   │   │   ├── bootstrap.css.map
│   │   │   │   │   │   ├── bootstrap.min.css
│   │   │   │   │   │   └── cover.css
│   │   │   │   │   └── js
│   │   │   │   │       ├── bootstrap.min.js
│   │   │   │   │       └── bootstrap.min.js.map
│   │   │   │   └── templates
│   │   │   │       ├── helpers
│   │   │   │       │   └── _nav.jinja
│   │   │   │       ├── layout.jinja
│   │   │   │       └── welcome
│   │   │   │           └── index_page.jinja
│   │   │   ├── README.md.ecr
│   │   │   ├── shard.yml.ecr
│   │   │   ├── spec
│   │   │   │   ├── {{project}}_spec.cr.ecr
│   │   │   │   └── spec_helper.cr.ecr
│   │   │   ├── src
│   │   │   │   ├── {{project}}.cr.ecr
│   │   │   │   ├── contracts
│   │   │   │   │   └── welcome
│   │   │   │   │       └── index_contract.cr.ecr
│   │   │   │   ├── db
│   │   │   │   │   ├── migrations
│   │   │   │   │   ├── README.md.ecr
│   │   │   │   │   ├── schema.cr.ecr
│   │   │   │   │   └── seed.cr.ecr
│   │   │   │   ├── endpoints
│   │   │   │   │   └── welcome
│   │   │   │   │       └── index_endpoint.cr.ecr
│   │   │   │   ├── initializers
│   │   │   │   │   ├── database.cr.ecr
│   │   │   │   │   └── logger.cr.ecr
│   │   │   │   ├── models
│   │   │   │   │   └── your_models_goes_here.txt
│   │   │   │   ├── pages
│   │   │   │   │   └── welcome
│   │   │   │   │       └── index_page.cr.ecr
│   │   │   │   └── server.cr.ecr
│   │   │   └── tasks
│   │   │       └── taskfile.cr.ecr
│   │   └── scaffold
│   │       ├── public
│   │       │   └── templates
│   │       │       ├── helpers
│   │       │       │   └── +_nav.jinja.ecr
│   │       │       └── pages
│   │       │           └── {{resource}}
│   │       │               ├── edit_page.jinja.ecr
│   │       │               ├── index_page.jinja.ecr
│   │       │               ├── new_page.jinja.ecr
│   │       │               └── show_page.jinja.ecr
│   │       └── src
│   │           ├── contracts
│   │           │   └── {{resource}}
│   │           │       ├── create_contract.cr.ecr
│   │           │       ├── destroy_contract.cr.ecr
│   │           │       ├── edit_contract.cr.ecr
│   │           │       ├── index_contract.cr.ecr
│   │           │       ├── new_contract.cr.ecr
│   │           │       ├── show_contract.cr.ecr
│   │           │       └── update_contract.cr.ecr
│   │           ├── endpoints
│   │           │   └── {{resource}}
│   │           │       ├── create_endpoint.cr.ecr
│   │           │       ├── destroy_endpoint.cr.ecr
│   │           │       ├── edit_endpoint.cr.ecr
│   │           │       ├── index_endpoint.cr.ecr
│   │           │       ├── new_endpoint.cr.ecr
│   │           │       ├── show_endpoint.cr.ecr
│   │           │       └── update_endpoint.cr.ecr
│   │           ├── models
│   │           │   └── your_models_goes_here.txt
│   │           └── pages
│   │               └── {{resource}}
│   │                   ├── edit_page.cr.ecr
│   │                   ├── index_page.cr.ecr
│   │                   ├── new_page.cr.ecr
│   │                   └── show_page.cr.ecr
│   └── utils.cr
└── azu_cli.cr

48 directories, 106 files
```

### File Naming
- Command files: `{command_name}.cr`
- Generator files: `{resource_type}_generator.cr`
- Template files: `{template_name}.ecr`
- Utility files: descriptive names ending in `.cr`

## Testing Guidelines

### Spec Structure
- Mirror `src/` structure in `spec/`
- Use descriptive `describe` and `it` blocks
- Test both success and failure scenarios
- Mock file system operations when appropriate
- Test generated code compilation

### Test Patterns
```crystal
describe Azu::Commands::Project do
  describe "#call" do
    it "generates project structure" do
      # Test implementation
    end

    it "handles invalid project names" do
      # Error case testing
    end
  end
end
```

## Dependencies and Imports

### Shard Management
- Keep `shard.yml` dependencies minimal
- Pin dependency versions for stability
- Group dependencies logically (development, test, production)
- Document why each dependency is needed

### Import Guidelines
- Import only what you need
- Use qualified imports when possible
- Group imports: standard library first, then shards, then local files
- Avoid wildcard imports unless necessary

## Performance Considerations

### Compilation Performance
- Keep macro usage reasonable
- Avoid deep inheritance hierarchies
- Use generic types judiciously
- Profile compilation times for large changes

### Runtime Performance
- Use appropriate data structures (Array vs Set vs Hash)
- Minimize string allocations in hot paths
- Use `String::Builder` for complex string building
- Cache expensive computations when possible

## Documentation Standards

### Code Documentation
- Use Crystal's documentation format (`# Description`)
- Document public methods and classes
- Include usage examples for complex APIs
- Document parameter types and return values

### README and Guides
- Keep README concise but complete
- Include installation instructions
- Provide usage examples
- Link to related documentation

## Error Messages and User Experience

### User-Friendly Messages
- Provide clear, actionable error messages
- Use colors for different message types (if terminal supports it)
- Include suggestions for fixing errors
- Show progress for long operations

### Logging
- Use structured logging when available
- Log to appropriate streams (STDOUT for output, STDERR for errors)
- Provide verbose mode for debugging
- Include timestamps for long-running operations

## Build and Deployment

### Makefile Usage
- Keep Makefile simple and documented
- Support common targets: build, install, clean, test
- Handle cross-platform differences
- Use variables for commonly changed values

### Version Management
- Use semantic versioning
- Update version in `shard.yml` and code
- Tag releases appropriately
- Maintain changelog for user-facing changes

## Security Considerations

### Input Validation
- Validate all user inputs
- Sanitize file paths to prevent directory traversal
- Validate database connection parameters
- Check file permissions before operations

### File Operations
- Use secure temporary file creation
- Set appropriate file permissions on generated files
- Validate file extensions and types
- Handle symbolic links safely

## Common Patterns to Avoid

- Don't use `eval` or similar dynamic code execution
- Avoid global variables; use dependency injection
- Don't ignore errors or exceptions
- Avoid hardcoded paths; use configuration
- Don't mix business logic with CLI presentation logic

## Debugging and Development

### Development Workflow
- Use `crystal run` for development
- Enable all compiler warnings
- Use `crystal tool hierarchy` to understand type relationships
- Profile memory usage for large operations

### Debugging Tools
- Use `pp` for debug output
- Leverage Crystal's built-in debugging capabilities
- Use proper logging instead of `puts` for debugging
- Test with various Crystal versions if possible

ation errors gracefully

## Features

# Azu CLI - Project Development Plan

:::info[Project Overview]
**Project Name:** Azu CLI
**Language:** Crystal
**Dependencies:** azutoolkit/azu, azutoolkit/cql
**Target:** Developer productivity and engagement enhancement
**Priority:** High-impact developer experience
:::

## Phase 1: Foundation & Core Commands

:::phase[Phase 1 - Foundation]
**Priority:** Critical
**Dependencies:** azutoolkit/azu, azutoolkit/cql
**Deliverables:** Basic CLI structure, core commands, project scaffolding
:::

### 1.1 CLI Infrastructure

:::task[CLI Framework Setup]
**Priority:** P0
**Dependencies:** Crystal CLI libraries

- [x] Set up Crystal CLI framework Topia (https://github.com/azutoolkit/topia/tree/master)
- [x] Implement command parsing and routing
- [x] Create base command structure
- [x] Add configuration management system
- [x] Implement logging and error handling
- [x] Set up testing framework for CLI commands

**Acceptance Criteria:**
- CLI can parse commands and subcommands
- Configuration files are properly loaded
- Error messages are user-friendly
- Unit tests cover core functionality
:::

### 1.2 Project Management Core

:::task[Project Initialization]
**Priority:** P0
**Dependencies:** Azu toolkit integration

- [x] `azu new <project-name>` command
- [x] `azu init` for existing projects
- [x] Template system architecture
- [x] Basic project templates (web, api, cli)
- [x] Interactive project setup wizard
- [x] Shard.yml generation and management

**Acceptance Criteria:**
- Can create new Azu projects from templates
- Interactive setup guides user through configuration
- Generated projects compile and run successfully
- Templates are easily extensible
:::

:::task[Code Generation System]
**Priority:** P0
**Dependencies:** Project templates

- [x] `azu generate` command framework
- [x] Controller generation
- [x] Model generation
- [x] Service generation
- [x] Middleware generation
- [x] Custom component templates

**Acceptance Criteria:**
- Generated components follow Azu conventions
- Files are created in correct directory structure
- Generated code includes proper imports and boilerplate
- Components integrate seamlessly with existing project
:::

### 1.3 Database Integration (CQL)

:::task[Database Commands]
**Priority:** P1
**Dependencies:** CQL toolkit integration

- [x] `azu db:create` command
- [x] `azu db:migrate` command
- [x] `azu db:seed` command
- [x] `azu db:reset` command
- [x] Migration file generation
- [x] Database configuration management

**Acceptance Criteria:**
- Database operations work with multiple adapters
- Migrations can be run and rolled back
- Seed data can be loaded consistently
- Database state is properly managed
:::

## Phase 2: Development Workflow Enhancement

:::phase[Phase 2 - Development Tools]
**Priority:** High
**Dependencies:** Phase 1 completion
**Deliverables:** Development server, testing tools, code quality
:::

### 2.1 Development Server

:::task[Hot Reloading Server]
**Priority:** P1
**Dependencies:** File system watching

- [x] `azu serve` command
- [x] File system watcher implementation
- [x] Hot reloading mechanism
- [x] Multi-environment configuration
- [x] Development middleware integration
- [x] Error reporting and recovery

**Acceptance Criteria:**
- Changes trigger automatic rebuilds
- Browser automatically refreshes on changes
- Build errors are displayed clearly
- Server can handle multiple environments
:::

### 2.2 Testing & Quality

:::task[Testing Framework Integration]
**Priority:** P1
**Dependencies:** Crystal testing frameworks

- [ ] `azu test` command
- [ ] `azu test:watch` for continuous testing
- [ ] Parallel test execution
- [ ] Code coverage reporting
- [ ] Test result formatting
- [ ] Integration with CI/CD

**Acceptance Criteria:**
- Tests run efficiently with proper reporting
- Coverage reports are accurate and detailed
- Continuous testing provides immediate feedback
- Integration tests work with database
:::

:::task[Code Quality Tools]
**Priority:** P1
**Dependencies:** Crystal linting tools

- [ ] `azu lint` command
- [ ] `azu format` command
- [ ] Customizable linting rules
- [ ] Pre-commit hook integration
- [ ] Code complexity analysis
- [ ] Security vulnerability scanning

**Acceptance Criteria:**
- Code style is consistently enforced
- Linting rules are configurable
- Format command preserves code semantics
- Security issues are detected and reported
:::

### 2.3 Interactive Development

:::task[REPL Integration]
**Priority:** P2
**Dependencies:** Crystal REPL capabilities

- [ ] `azu console` command
- [ ] Application context loading
- [ ] Interactive query building
- [ ] Component inspection
- [ ] State debugging capabilities
- [ ] History and session management

**Acceptance Criteria:**
- REPL loads full application context
- Can interact with models and services
- Database queries can be tested interactively
- Session state is preserved between commands
:::

## Phase 3: Advanced Features & Integrations

:::phase[Phase 3 - Advanced Tools]
**Priority:** Medium
**Dependencies:** Phase 2 completion
**Deliverables:** Authentication, jobs, deployment, documentation
:::

### 3.1 Authentication Integration

:::task[Authly Integration]
**Priority:** P1
**Dependencies:** Authly toolkit

- [ ] `azu auth:setup` command
- [ ] OAuth2 configuration
- [ ] JWT token management
- [ ] User model generation
- [ ] Authentication middleware setup
- [ ] Security audit tools

**Acceptance Criteria:**
- Authentication can be configured quickly
- Multiple OAuth providers supported
- JWT tokens are properly managed
- Security best practices are enforced
:::

### 3.2 Job Queue Management

:::task[JoobQ Integration]
**Priority:** P1
**Dependencies:** JoobQ toolkit

- [ ] `azu jobs:create` command
- [ ] `azu jobs:monitor` dashboard
- [ ] `azu jobs:retry` failed jobs
- [ ] Job scheduling interface
- [ ] Performance metrics collection
- [ ] Queue management tools

**Acceptance Criteria:**
- Background jobs can be created and managed
- Queue monitoring provides real-time status
- Failed jobs can be inspected and retried
- Scheduling works reliably
:::

### 3.3 Deployment & Production

:::task[Build & Deploy Tools]
**Priority:** P2
**Dependencies:** Platform-specific deployment tools

- [ ] `azu build` command with optimization
- [ ] `azu deploy` for multiple platforms
- [ ] Docker integration
- [ ] Environment variable management
- [ ] Health check implementation
- [ ] Log aggregation and analysis

**Acceptance Criteria:**
- Production builds are optimized
- Deployment works for major platforms
- Environment configuration is secure
- Health checks provide meaningful status
:::

### 3.4 Documentation & API Tools

:::task[Documentation Generation]
**Priority:** P2
**Dependencies:** Code analysis tools

- [ ] `azu docs` command
- [ ] API documentation generation
- [ ] OpenAPI specification support
- [ ] Interactive documentation server
- [ ] Code example extraction
- [ ] Documentation validation

**Acceptance Criteria:**
- Documentation is generated from code
- API docs are interactive and comprehensive
- Examples are validated and current
- Documentation can be served locally
:::

## Phase 4: Enhanced Developer Experience

:::phase[Phase 4 - UX Enhancement]
**Priority:** Medium
**Deliverables:** Visual improvements, productivity tools, team features
:::

### 4.1 Visual & Interactive Enhancements

:::task[Rich Terminal UI]
**Priority:** P2
**Dependencies:** Terminal UI libraries

- [ ] Interactive menus and forms
- [ ] Progress bars and status indicators
- [ ] Syntax highlighting
- [ ] Color-coded output
- [ ] Dashboard mode for monitoring
- [ ] Responsive terminal layouts

**Acceptance Criteria:**
- Terminal interface is visually appealing
- Interactive elements work reliably
- Output is color-coded and readable
- Dashboard provides useful overview
:::

### 4.2 Productivity Tools

:::task[Code Analysis & Optimization]
**Priority:** P2
**Dependencies:** Static analysis tools

- [ ] `azu analyze` command
- [ ] Code complexity metrics
- [ ] Performance bottleneck detection
- [ ] Dependency analysis
- [ ] Refactoring suggestions
- [ ] Architecture visualization

**Acceptance Criteria:**
- Analysis provides actionable insights
- Metrics track code quality over time
- Performance issues are identified
- Suggestions improve code quality
:::

### 4.3 Team Collaboration

:::task[Collaboration Features]
**Priority:** P2
**Dependencies:** Git integration

- [ ] `azu team:setup` command
- [ ] Shared configuration management
- [ ] Code review checklist generation
- [ ] Development guideline enforcement
- [ ] Progress tracking tools
- [ ] Team metrics dashboard

**Acceptance Criteria:**
- Team setup is automated and consistent
- Configurations are shared reliably
- Code review process is streamlined
- Team productivity is visible
:::

## Phase 5: Advanced & Enterprise Features

:::phase[Phase 5 - Advanced Features
**Priority:** Low
**Dependencies:** Phase 4 completion
**Deliverables:** AI assistance, monitoring, enterprise tools
:::

### 5.1 AI-Powered Assistance

:::task[Smart Development Tools]
**Priority:** P3
**Dependencies:** AI/ML integration

- [ ] Context-aware code suggestions
- [ ] Intelligent error resolution
- [ ] Code optimization recommendations
- [ ] Pattern recognition and suggestions
- [ ] Natural language query interface
- [ ] Automated code review

**Acceptance Criteria:**
- Suggestions are contextually relevant
- Error resolution is accurate
- Optimization suggestions improve performance
- Natural language interface is intuitive
:::

### 5.2 Monitoring & Observability

:::task[Application Monitoring]
**Priority:** P3
**Dependencies:** Monitoring libraries

- [ ] Real-time performance monitoring
- [ ] Distributed tracing implementation
- [ ] Custom metrics collection
- [ ] Alerting system
- [ ] Performance dashboard
- [ ] Automated performance reports

**Acceptance Criteria:**
- Monitoring captures relevant metrics
- Tracing provides insight into bottlenecks
- Alerts are timely and actionable
- Dashboard is informative and responsive
:::

## Cross-Cutting Concerns

:::concern[Documentation & Learning]
**Throughout all phases**

- [x] Comprehensive CLI help system
- [x] Interactive tutorials
- [x] Best practices documentation
- [ ] Video tutorials and screencasts
- [x] Community examples and patterns
- [x] Migration guides from other tools
:::

:::concern[Testing & Quality Assurance]
**Throughout all phases**

- [ ] Unit tests for all commands
- [ ] Integration tests for workflows
- [ ] Performance benchmarks
- [ ] User acceptance testing
- [ ] Accessibility testing
- [ ] Cross-platform compatibility
:::

:::concern[Configuration & Extensibility]
**Throughout all phases**

- [ ] Plugin system architecture (Topia::Plugin - https://github.com/azutoolkit/topia/blob/master/src/topia/plugin.cr)
- [ ] Custom command development
- [ ] Configuration schema validation
- [ ] Theme and customization support
- [ ] IDE and editor integrations
- [ ] API for third-party tools
:::

## Success Metrics

:::metrics[Key Performance Indicators]
**Developer Adoption:**
- CLI download and usage rates
- Community contributions and plugins
- Documentation engagement metrics
- Support ticket volume and resolution time

**Developer Productivity:**
- Time to create new project (target: <2 minutes)
- Build and deployment time improvements
- Code quality metrics improvement
- Developer satisfaction surveys

**Technical Performance:**
- CLI command response times (target: <500ms)
- Memory usage optimization
- Cross-platform compatibility score
- Integration test coverage (target: >90%)
:::

## Risk Mitigation

:::risk[Technical Risks]
**Risk:** Crystal ecosystem limitations
**Mitigation:** Early prototyping and community engagement

**Risk:** CQL/Azu toolkit breaking changes
**Mitigation:** Version pinning and automated compatibility testing

**Risk:** Performance issues with large projects
**Mitigation:** Performance testing and optimization from early phases

**Risk:** Cross-platform compatibility problems
**Mitigation:** Continuous testing on multiple platforms
:::

:::risk[Project Risks]
**Risk:** Feature scope creep
**Mitigation:** Strict phase gates and prioritization framework

**Risk:** Developer adoption challenges
**Mitigation:** Early user feedback and iterative development

**Risk:** Maintenance burden
**Mitigation:** Automated testing and modular architecture

**Risk:** Competition from existing tools
**Mitigation:** Unique value proposition focus and community building
:::

## Implementation Notes

:::implementation[Architecture Decisions]
**CLI Framework:** Topia (https://github.com/azutoolkit/topia) Crystal command-line parsing
**Configuration:** YAML-based with schema validation (Topia Configuration)
**Plugin System:** Crystal compilation-based plugins (Topia::Plugin - https://github.com/azutoolkit/topia/blob/master/src/topia/plugin.cr))
**Testing:** Crystal's built-in testing with custom reporters
**Documentation:** Crystal's doc generator with custom templates
**Packaging:** Crystal's native compilation with cross-platform builds
:::

:::implementation[Development Workflow]
**Version Control:** Git with conventional commits
**CI/CD:** GitHub Actions with multi-platform testing
**Code Quality:** Crystal's built-in formatter with custom linting
**Documentation:** Inline documentation with generated guides
**Release Management:** Semantic versioning with automated releases
**Community:** Discord/Gitter for real-time support
:::

Remember: The Azu CLI should feel intuitive and powerful, following Crystal's philosophy of performance and expressiveness while maintaining the elegant simplicity that makes developers productive.
