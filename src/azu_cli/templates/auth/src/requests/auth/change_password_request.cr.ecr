# Change Password Request
# Validates password change data

module <%= project.camelcase %>::Auth
struct ChangePasswordRequest
  include JSON::Serializable

  property current_password : String
  property new_password : String
  property new_password_confirmation : String

  property errors : Hash(String, Array(String)) = {} of String => Array(String)

  def initialize(params : Hash)
    @current_password = params["current_password"]?.to_s
    @new_password = params["new_password"]?.to_s
    @new_password_confirmation = params["new_password_confirmation"]?.to_s
  end

  def valid? : Bool
    @errors.clear

    validate_current_password
    validate_new_password
    validate_password_confirmation

    @errors.empty?
  end

  private def validate_current_password
    if @current_password.empty?
      add_error("current_password", "is required")
    end
  end

  private def validate_new_password
    if @new_password.empty?
      add_error("new_password", "is required")
    elsif @new_password.size < 8
      add_error("new_password", "must be at least 8 characters")
    elsif @new_password == @current_password
      add_error("new_password", "must be different from current password")
    elsif !strong_password?(@new_password)
      add_error("new_password", "must contain at least one uppercase letter, one lowercase letter, one number, and one special character")
    end
  end

  private def validate_password_confirmation
    if @new_password_confirmation.empty?
      add_error("new_password_confirmation", "is required")
    elsif @new_password != @new_password_confirmation
      add_error("new_password_confirmation", "does not match new password")
    end
  end

  private def strong_password?(password : String) : Bool
    # Check for uppercase, lowercase, number, and special character
    has_upper = password.match(/[A-Z]/)
    has_lower = password.match(/[a-z]/)
    has_number = password.match(/[0-9]/)
    has_special = password.match(/[^A-Za-z0-9]/)

    has_upper && has_lower && has_number && has_special
  end

  private def add_error(field : String, message : String)
    @errors[field] ||= [] of String
    @errors[field] << message
  end
end
