<%- if rbac_enabled? %>
<%# Requires first (Crystal convention) %>
require "../../models/user"
require "../../requests/auth/permissions_request"
require "../../response/auth/permissions_json"
<%- if using_jwt? || using_authly? %>
require "jwt"
<%- end %>

module <%= project.camelcase %>::Auth
  struct PermissionsEndpoint
    include Azu::Endpoint(Auth::PermissionsRequest, Auth::PermissionsResponse | Azu::Response::Empty)

    get "/auth/permissions"

    def call : Auth::PermissionsResponse | Azu::Response::Empty
      user = current_user
      unless user
        context.response.status = HTTP::Status::UNAUTHORIZED
        context.response.content_type = "application/json"
        context.response.print({error: "Not authenticated"}.to_json)
        return Azu::Response::Empty.new
      end

      u = user.not_nil!
      roles = u.roles.map(&.name)
      permissions = u.permissions.map(&.name)
      Auth::PermissionsResponse.new(roles, permissions)
    end

    private def current_user : ::User?
      <%- if using_jwt? || using_authly? %>
      token = context.request.headers["Authorization"]?.try(&.sub("Bearer ", ""))
      return nil unless token

      payload, header = JWT.decode(token, jwt_secret, JWT::Algorithm::HS256)
      ::User.find(payload["sub"].as_s.to_i64)
      <%- else %>
      id_val = session["user_id"]?
      return nil unless id_val
      ::User.find(id_val.as(Int64))
      <%- end %>
    rescue
      nil
    end

    <%- if using_jwt? || using_authly? %>
    private def jwt_secret : String
      ENV["JWT_SECRET"]? || raise "JWT_SECRET environment variable not set"
    end
    <%- end %>
  end
end
<%- end %>


