<%- if using_jwt? || using_authly? %>
<%# Requires first (Crystal convention) %>
require "../../models/user"
require "../../response/auth/refresh_json"
require "jwt"

module <%= project.camelcase %>::Auth
  struct RefreshEndpoint
    include Azu::Endpoint(Auth::RefreshTokenRequest, Auth::RefreshResponse | Azu::Response::Empty)

    post "/auth/refresh"

    def call : Auth::RefreshResponse | Azu::Response::Empty
      req = refresh_token_request
      unless req.valid?
        context.response.status = HTTP::Status::UNPROCESSABLE_ENTITY
        context.response.content_type = "application/json"
        context.response.print({errors: req.errors}.to_json)
        return Azu::Response::Empty.new
      end

      <%- if using_jwt? || using_authly? %>
      payload, header = JWT.decode(req.refresh_token, jwt_refresh_secret, JWT::Algorithm::HS256)
      unless payload["type"]? == "refresh"
        context.response.status = HTTP::Status::UNAUTHORIZED
        context.response.content_type = "application/json"
        context.response.print({error: "Invalid refresh token"}.to_json)
        return Azu::Response::Empty.new
      end

      access = generate_access_from_payload(payload)
      new_refresh = generate_refresh_from_payload(payload)
      Auth::RefreshResponse.new(access, new_refresh)
      <%- else %>
      context.response.status = HTTP::Status::BAD_REQUEST
      context.response.content_type = "application/json"
      context.response.print({error: "Refresh tokens require JWT strategy"}.to_json)
      return Azu::Response::Empty.new
      <%- end %>
    end

    <%- if using_jwt? || using_authly? %>
    private def generate_access_from_payload(payload : Hash(String, JSON::Any)) : String
      now = Time.utc
      sub = payload["sub"].as_s
      role = payload["role"]?.try(&.as_s) || "user"
      new_payload = {
        "sub" => sub,
        "iat" => now.to_unix,
        "exp" => (now + 15.minutes).to_unix,
        "iss" => jwt_issuer,
        "aud" => jwt_audience,
        "role" => role,
      }
      JWT.encode(new_payload, jwt_secret, JWT::Algorithm::HS256)
    end

    private def generate_refresh_from_payload(payload : Hash(String, JSON::Any)) : String
      now = Time.utc
      sub = payload["sub"].as_s
      new_payload = {
        "sub" => sub,
        "iat" => now.to_unix,
        "exp" => (now + 7.days).to_unix,
        "type" => "refresh",
      }
      JWT.encode(new_payload, jwt_refresh_secret, JWT::Algorithm::HS256)
    end

    private def jwt_refresh_secret : String
      ENV["JWT_REFRESH_SECRET"]? || raise "JWT_REFRESH_SECRET environment variable not set"
    end

    private def jwt_secret : String
      ENV["JWT_SECRET"]? || raise "JWT_SECRET environment variable not set"
    end

    private def jwt_issuer : String
      ENV["JWT_ISSUER"]? || "<%= project.downcase %>-api"
    end

    private def jwt_audience : String
      ENV["JWT_AUDIENCE"]? || "<%= project.downcase %>-client"
    end
    <%- end %>
  end
end

<%- end %>


