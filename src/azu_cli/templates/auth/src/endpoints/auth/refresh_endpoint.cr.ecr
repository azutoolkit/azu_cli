<%- if using_jwt? || using_authly? %>
<%# Requires first (Crystal convention) %>
require "../../models/user"
require "jwt"

module <%= project.camelcase %>::Auth
  struct RefreshEndpoint
    include Azu::Endpoint(Auth::RefreshTokenRequest, Auth::RefreshResponse | Azu::Response::Empty)

    post "/auth/refresh"

    def call : Auth::RefreshResponse | Azu::Response::Empty
      req = refresh_token_request
      unless req.valid?
        halt 422, {errors: req.errors}.to_json
      end

      payload, header = JWT.decode(req.refresh_token, jwt_refresh_secret, JWT::Algorithm::HS256)
      unless payload["type"]? == "refresh"
        halt 401, {error: "Invalid refresh token"}.to_json
      end

      user_id = payload["sub"]?.try(&.as_s).try(&.to_i64)
      user = user_id ? ::User.find(user_id) : nil
      unless user
        halt 401, {error: "User not found"}.to_json
      end

      access = generate_access_token(user.not_nil!)
      refresh = generate_refresh_token(user.not_nil!)
      Auth::RefreshResponse.new(access, refresh)
    rescue JWT::Error
      halt 401, {error: "Invalid refresh token"}.to_json
    end

    private def generate_access_token(user : ::User) : String
      now = Time.utc
      payload = {
        "sub" => user.id.to_s,
        "iat" => now.to_unix,
        "exp" => (now + 15.minutes).to_unix,
        "iss" => jwt_issuer,
        "aud" => jwt_audience,
        "role" => user.role,
      }
      JWT.encode(payload, jwt_secret, JWT::Algorithm::HS256)
    end

    private def generate_refresh_token(user : ::User) : String
      now = Time.utc
      payload = {
        "sub" => user.id.to_s,
        "iat" => now.to_unix,
        "exp" => (now + 7.days).to_unix,
        "type" => "refresh",
      }
      JWT.encode(payload, jwt_refresh_secret, JWT::Algorithm::HS256)
    end

    private def jwt_secret : String
      ENV["JWT_SECRET"]? || raise "JWT_SECRET environment variable not set"
    end

    private def jwt_refresh_secret : String
      ENV["JWT_REFRESH_SECRET"]? || raise "JWT_REFRESH_SECRET environment variable not set"
    end

    private def jwt_issuer : String
      ENV["JWT_ISSUER"]? || "<%= project.downcase %>-api"
    end

    private def jwt_audience : String
      ENV["JWT_AUDIENCE"]? || "<%= project.downcase %>-client"
    end
  end
end
<%- end %>


