require "../../models/user"
<%- if using_jwt? || using_authly? %>
require "jwt"
<%- end %>

module <%= project.camelcase %>::Auth
  struct ChangePasswordEndpoint
    include Azu::Endpoint(Auth::ChangePasswordRequest, Auth::ChangePasswordResponse | Azu::Response::Empty)

    post "/auth/change-password"

    def call : Auth::ChangePasswordResponse | Azu::Response::Empty
      user = current_user
      halt 401, {error: "Not authenticated"}.to_json unless user

      req = change_password_request
      unless req.valid?
        halt 422, {errors: req.errors}.to_json
      end

      u = user.not_nil!
      unless u.verify_password(req.current_password)
        halt 401, {error: "Current password is incorrect"}.to_json
      end

      u.password = req.new_password
      unless u.save
        halt 422, {errors: u.errors}.to_json
      end

      Auth::ChangePasswordResponse.new
    end

    private def current_user : ::User?
      <%- if using_jwt? || using_authly? %>
      token = request.headers["Authorization"]?.try(&.sub("Bearer ", ""))
      return nil unless token

      payload, header = JWT.decode(token, jwt_secret, JWT::Algorithm::HS256)
      user_id = payload["sub"]?.try(&.as_s).try(&.to_i64)
      return nil unless user_id
      ::User.find(user_id)
      <%- else %>
      id_val = session["user_id"]?
      return nil unless id_val
      ::User.find(id_val.as(Int64))
      <%- end %>
    rescue
      nil
    end

    <%- if using_jwt? || using_authly? %>
    private def jwt_secret : String
      ENV["JWT_SECRET"]? || raise "JWT_SECRET environment variable not set"
    end
    <%- end %>
  end
end


