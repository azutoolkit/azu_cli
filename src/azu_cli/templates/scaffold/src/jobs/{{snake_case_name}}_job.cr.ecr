# <%= job_struct_name %> - Background Job
# Generated by Azu CLI
#
# This job is configured to:
# - Run in queue: <%= queue %>
# - Retry up to <%= retries %> times on failure
# - Expire after <%= expires %>
#
# To enqueue this job:
#   <%= job_struct_name %>.enqueue(<%= constructor_params.split(", ").map { |p| p.split(" : ")[0].sub("@", "") + ": value" }.join(", ") %>)
#
# To schedule this job:
#   <%= job_struct_name %>.schedule(in: 5.minutes, <%= constructor_params.split(", ").map { |p| p.split(" : ")[0].sub("@", "") + ": value" }.join(", ") %>)

struct <%= job_struct_name %>
  include JoobQ::Job

  # Queue configuration
  @queue   = "<%= queue %>"
  # Number of retries on failure
  @retries = <%= retries %>
  # Job expiration time
  @expires = <%= expiration_seconds %>

<% if has_parameters? %>
  # Job parameters
<%= constructor_params.split(", ").map { |p| "  property #{p.sub("@", "")}" }.join("\n") %>

  def initialize(<%= constructor_params %>)
  end

<% else %>
  def initialize
  end

<% end %>
  # Perform the job
  # This method is called when the job is processed
  def perform
<%= perform_method_body %>
  <% if !has_parameters? %>
    # Job completed successfully
    Log.info { "<%= job_struct_name %> completed" }
  <% end %>
  rescue ex : Exception
    # Log the error and re-raise for JoobQ's retry mechanism
    Log.error(exception: ex) { "Failed to process <%= job_struct_name %>" }
    raise ex
  end
end

# Add this job to the registry when file is required
# Uncomment the following line in src/initializers/joobq.cr:
# JoobQ::QueueFactory.register_job_type(<%= job_struct_name %>)

