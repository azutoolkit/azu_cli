module <%= @module_name %>
  struct <%= @name.camelcase %>::<%= @action.camelcase %><%= @project_type == "api" ? "Response" : "Page" %>
    include Azu::Response
<% if @project_type == "web" -%>
    include Azu::Templates::Renderable
<% end -%>

<% if @project_type == "api" -%>
  <% if @action == "index" -%>
    def initialize(@<%= @resource_plural %> : Array(<%= @name.camelcase %>) = [] of <%= @name.camelcase %>,
                   @page : Int32 = 1,
                   @per_page : Int32 = 20,
                   @total : Int32? = nil)
    end

    def render
      response = {
        "<%= @resource_plural %>" => @<%= @resource_plural %>.map do |item|
          begin
            JSON.parse(item.to_json)
          rescue
            {} of String => JSON::Any
          end
        end,
        "meta" => {
          "page" => @page,
          "per_page" => @per_page,
          "count" => @<%= @resource_plural %>.size
        }
      }

      response["meta"]["total"] = @total if @total
      response.to_json
    end
  <% elsif @action == "show" -%>
    def initialize(@<%= @resource_singular %> : <%= @name.camelcase %>)
    end

    def render
      begin
        @<%= @resource_singular %>.to_json
      rescue ex
        {
          "error" => "Serialization failed",
          "message" => ex.message
        }.to_json
      end
    end
  <% else -%>
    def initialize(@<%= @resource_singular %> : <%= @name.camelcase %>? = nil,
                   @message : String = "",
                   @success : Bool = true,
                   @errors : Hash(String, Array(String))? = nil)
    end

    def render
      response = {
        "success" => @success,
        "message" => @message
      } of String => String | Bool | Hash(String, Array(String)) | JSON::Any | Nil

      if resource = @<%= @resource_singular %>
        begin
          response["<%= @resource_singular %>"] = JSON.parse(resource.to_json)
        rescue
          response["<%= @resource_singular %>"] = nil
        end
      end

      response["errors"] = @errors if @errors
      response.to_json
    end
  <% end -%>
<% else -%>
  <% if @action == "index" -%>
    def initialize(@<%= @resource_plural %> : Array(<%= @name.camelcase %>) = [] of <%= @name.camelcase %>,
                   @csrf_token : String = "",
                   @csrf_tag : String = "",
                   @csrf_metatag : String = "")
    end

    def render
      view data: {
        "<%= @resource_plural %>"        => array_to_hash(@<%= @resource_plural %>),
        "csrf_token"   => @csrf_token,
        "csrf_tag"     => @csrf_tag,
        "csrf_metatag" => @csrf_metatag,
      }
    end

    def array_to_hash(array : Array(<%= @name.camelcase %>)) : Array(Hash(String, String))
      array.map { |<%= @resource_singular %>| convert_to_hash(<%= @resource_singular %>) }
    end

    def convert_to_hash(<%= @resource_singular %> : <%= @name.camelcase %>) : Hash(String, String)
      {
<% @fields.each do |field_name, field_type| -%>
        "<%= field_name %>" => safe_to_s(<%= @resource_singular %>.<%= field_name %>),
<% end -%>
      }
    end

    # Safely convert any value to string, handling nil and complex types
    private def safe_to_s(value : String) : String
      value
    end

    private def safe_to_s(value : Bool) : String
      value ? "true" : "false"
    end

    private def safe_to_s(value : Time) : String
      value.to_s("%Y-%m-%d %H:%M:%S")
    end

    private def safe_to_s(value : Nil) : String
      ""
    end

    private def safe_to_s(value) : String
      value.to_s
    end
  <% elsif @action == "show" || @action == "edit" -%>
    def initialize(@<%= @resource_singular %> : <%= @name.camelcase %>? = nil)
    end

    def render
      view data: {
        "<%= @resource_singular %>" => <%= @resource_singular %>_to_hash,
      }
    end

    def <%= @resource_singular %>_to_hash : Hash(String, String)
      return {} of String => String if @<%= @resource_singular %>.nil?

      resource = @<%= @resource_singular %>.not_nil!
      {
<% @fields.each do |field_name, field_type| -%>
        "<%= field_name %>" => safe_to_s(resource.<%= field_name %>),
<% end -%>
      }
    end

    # Safely convert any value to string, handling nil and complex types
    private def safe_to_s(value : String) : String
      value
    end

    private def safe_to_s(value : Bool) : String
      value ? "true" : "false"
    end

    private def safe_to_s(value : Time) : String
      value.to_s("%Y-%m-%d %H:%M:%S")
    end

    private def safe_to_s(value : Nil) : String
      ""
    end

    private def safe_to_s(value) : String
      value.to_s
    end
  <% else -%>
    def initialize(@<%= @resource_singular %> : <%= @name.camelcase %>? = nil)
    end

    def render
      view data: {
        "<%= @resource_singular %>" => @<%= @resource_singular %>,
      }
    end
  <% end -%>
<% end -%>
  end
end
