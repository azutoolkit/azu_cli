require "cql"

module <%= @module_name %>::<%= @name.camelcase %>
  struct <%= @name.camelcase %>
    include CQL::ActiveRecord::Model(Int64)
    db_context <%= @module_name %>DB, :<%= @resource_plural %>

    # Attribute accessors
<% @fields.each do |field_name, field_type| -%>
    getter <%= field_name %> : <%= crystal_type(field_type) %>
<% end %>

    # Validations
<% @fields.each do |field_name, field_type| -%>
<% if field_name == "title" || field_name == "name" -%>
    validate :<%= field_name %>, presence: true
    validate :<%= field_name %>, size: 2..100
<% elsif field_name == "body" || field_name == "content" || field_name == "description" -%>
    validate :<%= field_name %>, presence: true
    validate :<%= field_name %>, size: 2..100
<% end -%>
<% end %>

    # Constructor
    def initialize(<% @fields.reject { |k, v| ["id", "created_at", "updated_at"].includes?(k) }.each_with_index do |(field_name, field_type), i| %>@<%= field_name %> : <%= crystal_type(field_type) %><% unless i == @fields.reject { |k, v| ["id", "created_at", "updated_at"].includes?(k) }.size - 1 %>, <% end %><% end %>)
    end

    # Scopes
<% @fields.each do |field_name, field_type| -%>
<% if field_type == "string" -%>
    scope :by_<%= field_name %>, ->(value : String) { where("<%= field_name %> ILIKE ?", "%" + value + "%") }
<% end -%>
<% end -%>
<% if @fields.has_key?("published") -%>
    scope :published, -> { where(published: true) }
<% end -%>
  end
end
