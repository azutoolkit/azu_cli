require "../spec_helper"

describe {{module_name}}::Middleware::{{class_name}} do
  let(middleware) { {{module_name}}::Middleware::{{class_name}}.new }
  let(context) { create_test_context }

  describe "#call" do
    it "processes the request through the middleware chain" do
      # Test that the middleware processes requests correctly
      middleware.call(context)

      # Add assertions here
      # context.response.status_code.should eq(200)
    end

    it "calls the next handler in the chain" do
      # Test that call_next is invoked
      next_called = false

      middleware.next = ->(_context : HTTP::Server::Context) {
        next_called = true
      }

      middleware.call(context)
      next_called.should be_true
    end
  end

  describe "request processing" do
    it "executes before_request logic" do
      # Test pre-processing logic
      # You might want to spy on logging or other side effects
    end
  end

  describe "response processing" do
    it "executes after_response logic" do
      # Test post-processing logic
      # You might want to spy on logging or other side effects
    end
  end

  private def create_test_context
    # Helper method to create a test HTTP context
    io = IO::Memory.new
    request = HTTP::Request.new("GET", "/test")
    response = HTTP::Server::Response.new(io)
    HTTP::Server::Context.new(request, response)
  end
end
