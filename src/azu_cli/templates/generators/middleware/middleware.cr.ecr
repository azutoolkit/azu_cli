module {{module_name}}
  module Middleware
    # {{class_name}} HTTP middleware
    # Processes requests and responses in the HTTP pipeline
    class {{class_name}}
      include HTTP::Handler

      def call(context : HTTP::Server::Context)
        # Pre-processing logic
        before_request(context)

        # Call the next handler in the chain
        call_next(context)

        # Post-processing logic
        after_response(context)
      end

      private def before_request(context : HTTP::Server::Context)
        # Add logic to execute before the request is processed
        # Examples:
        # - Authentication checks
        # - Request logging
        # - Header validation
        # - Rate limiting

        log_request(context)
      end

      private def after_response(context : HTTP::Server::Context)
        # Add logic to execute after the response is generated
        # Examples:
        # - Response logging
        # - Performance metrics
        # - Header modification
        # - Cleanup tasks

        log_response(context)
      end

      private def log_request(context : HTTP::Server::Context)
        puts "[{{class_name}}] #{context.request.method} #{context.request.path}"
      end

      private def log_response(context : HTTP::Server::Context)
        puts "[{{class_name}}] Response: #{context.response.status_code}"
      end
    end
  end
end
