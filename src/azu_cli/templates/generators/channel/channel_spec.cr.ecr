require "../spec_helper"

describe {{module_name}}::{{class_name}}Channel do
  let(channel) { {{module_name}}::{{class_name}}Channel.new(mock_socket) }

  describe "message handling" do
    {{test_events}}
  end

  describe "authentication" do
    {{test_auth}}
  end

  describe "lifecycle" do
    {{test_lifecycle}}
  end

  describe "broadcasting" do
    it "broadcasts messages to all connected clients" do
      # Test message broadcasting
      # channel.broadcast_to_channel({type: "test", data: "message"})
      # mock_socket.should have_received(:send)
    end

    it "sends messages to current client only" do
      # Test direct client messaging
      # channel.send_to_client({type: "direct", data: "message"})
      # mock_socket.should have_received(:send)
    end
  end

  describe "error handling" do
    it "handles invalid JSON messages gracefully" do
      invalid_json = "invalid json"
      channel.on_message(invalid_json)

      # Should log error and not crash
      # mock_socket.should have_received(:send).with(match(/error/))
    end

    it "sends error responses for unknown message types" do
      unknown_message = {type: "unknown_action"}.to_json
      channel.on_message(unknown_message)

      # Should handle unknown message types gracefully
    end
  end

  private def mock_socket
    # Create a mock WebSocket for testing
    # This would depend on your testing framework setup
    double("WebSocket")
  end
end
