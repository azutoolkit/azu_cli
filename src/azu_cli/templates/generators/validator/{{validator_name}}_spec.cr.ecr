require "spec"
require "../spec_helper"
require "../../src/validators/<%= validator_name %>"
require "../../src/models/<%= model_name %>"

describe <%= validator_name_camelcase %> do
  describe "validator structure" do
    it "inherits from Azu::Validator" do
      validator = <%= validator_name_camelcase %>.new(<%= model_name_camelcase %>.new)
      validator.should be_a(Azu::Validator)
    end

    it "can be instantiated with a model" do
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)
      validator.should be_a(<%= validator_name_camelcase %>)
    end

    it "has access to the record" do
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)
      validator.record.should eq(model)
    end
  end

  describe "validation logic" do
    it "returns array of errors" do
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)
      errors = validator.valid?
      errors.should be_a(Array(Schema::Error))
    end

    it "validates valid model" do
      # Create a valid model instance
      model = <%= model_name_camelcase %>.new
      # Set valid attributes here

      validator = <%= validator_name_camelcase %>.new(model)
      errors = validator.valid?
      errors.should be_empty
    end

    it "catches invalid model" do
      # Create an invalid model instance
      model = <%= model_name_camelcase %>.new
      # Set invalid attributes here

      validator = <%= validator_name_camelcase %>.new(model)
      errors = validator.valid?
      errors.should_not be_empty
    end
  end

  describe "error messages" do
    it "has a default error message" do
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)
      validator.message.should contain("<%= model_name_camelcase %>")
      validator.message.should contain("must be valid")
    end

    it "provides specific error messages for validation failures" do
      # Test specific validation error messages
      model = <%= model_name_camelcase %>.new
      # Set up invalid state

      validator = <%= validator_name_camelcase %>.new(model)
      errors = validator.valid?

      if errors.any?
        errors.each do |error|
          error.field.should_not be_nil
          error.message.should_not be_empty
        end
      end
    end
  end

  describe "custom validation rules" do
    it "implements custom business logic" do
      # Test custom validation rules specific to your domain
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)

      # Add tests for your custom validation logic
      # Example: testing uniqueness, complex business rules, etc.
    end

    it "handles edge cases" do
      # Test edge cases in validation
      model = <%= model_name_camelcase %>.new
      validator = <%= validator_name_camelcase %>.new(model)

      # Test nil values, empty strings, boundary conditions, etc.
    end
  end
end
