require "../spec_helper"

describe {{module_name}}::{{class_name}}Component do
  describe "#content" do
    it "renders the component content" do
      component = {{module_name}}::{{class_name}}Component.new{{test_constructor_args}}

      # Test that content method returns expected HTML structure
      component.should respond_to(:content)

      # Add specific content assertions
      # content = component.content
      # content.should contain("{{class_name}} Component")
    end
  end

  describe "event handling" do
{{test_events}}
  end
{{test_attributes}}

  describe "lifecycle methods" do
    it "responds to lifecycle methods" do
      component = {{module_name}}::{{class_name}}Component.new{{test_constructor_args}}

      # Test lifecycle method presence
      component.should respond_to(:on_mount) if component.responds_to?(:on_mount)
      component.should respond_to(:on_unmount) if component.responds_to?(:on_unmount)
      component.should respond_to(:on_connect) if component.responds_to?(:on_connect)
      component.should respond_to(:on_disconnect) if component.responds_to?(:on_disconnect)
    end
  end

  describe "DOM manipulation" do
    it "supports DOM update methods" do
      component = {{module_name}}::{{class_name}}Component.new{{test_constructor_args}}

      # Test DOM update method availability
      # These methods are provided by Azu::Component
      component.should respond_to(:update_element) if component.responds_to?(:update_element)
      component.should respond_to(:append_element) if component.responds_to?(:append_element)
    end
  end

  describe "real-time features" do
    it "supports broadcasting updates" do
      component = {{module_name}}::{{class_name}}Component.new{{test_constructor_args}}

      # Test broadcast functionality if available
      # component.should respond_to(:broadcast_update) if component.responds_to?(:broadcast_update)
    end
  end
end
