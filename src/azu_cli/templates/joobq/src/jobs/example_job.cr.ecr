# <%= @example_job_name rescue "ExampleJob" %> - Example Background Job
# Generated by Azu CLI
#
# This is an example job to demonstrate JoobQ integration
# You can use this as a template for creating your own jobs
#
# To enqueue this job:
#   <%= @example_job_name rescue "ExampleJob" %>.enqueue(message: "Hello, JoobQ!")
#
# To schedule this job:
#   <%= @example_job_name rescue "ExampleJob" %>.schedule(in: 5.minutes, message: "Hello, JoobQ!")

struct <%= @example_job_name rescue "ExampleJob" %>
  include JoobQ::Job

  # Queue configuration
  @queue   = "<%= @default_queue rescue "default" %>"
  # Number of retries on failure
  @retries = 3
  # Job expiration time
  @expires = 1.hour.total_seconds.to_i

  # Job parameters
  property message : String

  def initialize(@message : String = "Example job executed")
  end

  # Perform the job
  # This method is called when the job is processed
  def perform
    Log.info { "ðŸŽ‰ #{@message}" }
    Log.info { "Job executed at: #{Time.utc}" }

    # Add your job logic here
    # Example:
    # - Send emails
    # - Process data
    # - Call external APIs
    # - Generate reports

    Log.info { "<%= @example_job_name rescue "ExampleJob" %> completed successfully" }
  rescue ex : Exception
    # Log the error and re-raise for JoobQ's retry mechanism
    Log.error(exception: ex) { "Failed to process <%= @example_job_name rescue "ExampleJob" %>" }
    raise ex
  end
end

