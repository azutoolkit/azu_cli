<!doctype html>
<html lang="en" class="h-100">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="Mark Otto, Jacob Thornton, and Bootstrap contributors">
  <meta name="generator" content="Hugo 0.104.2">
  <title>Azu · Bootstrap v5.2</title>
  <link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/cover/">
  <link href="/assets/css/bootstrap.min.css" rel="stylesheet" crossorigin="anonymous">
  <!-- Favicons -->
  <meta name="theme-color" content="#712cf9">
  {% block page_header %}{% endblock %}
  <!-- Custom styles for this template -->
  <link href="/assets/css/cover.css" rel="stylesheet">
</head>

<body class="d-flex h-100 text-bg-dark">
  <div class="cover-container d-flex  h-100 p-3 mx-auto flex-column">
    <header class="mb-auto">
      <div>
        <h3 class="float-md-start mb-0">My App</h3>
        <nav class="nav nav-masthead justify-content#-center float-md-end">
          <a class="nav-link fw-bold py-1 px-0 active" aria-current="page" href="/">Home</a>
          {% include "helpers/_nav.jinja" %}
          <a class="nav-link fw-bold py-1 px-0" href="https://azutopia.gitbook.io/azu">Documentation</a>
          <a class="nav-link fw-bold py-1 px-0" href="https://github.com/azutoolkit">Github</a>
        </nav>
      </div>
    </header>

    <main>{% block page_body %}{% endblock %}</main>

    <footer class="mt-auto text-white-50">
      <p>Azu template by <a href="https://getbootstrap.com/" class="text-white">Bootstrap</a></p>
    </footer>
  </div>

  {% if hot_reload_enabled %}
  <!-- Azu Hot Reload Script - Development Only -->
  <script>
    (function () {
      'use strict';

      // Hot reload configuration
      const HOT_RELOAD_CONFIG = {
        port: 35729,
        host: 'localhost',
        reconnectInterval: 2000,
        maxReconnectAttempts: 10,
        debug: false
      };

      // Hot reload client class
      class AzuHotReloadClient {
        constructor() {
          this.ws = null;
          this.reconnectAttempts = 0;
          this.isConnected = false;
          this.reconnectTimer = null;

          // Initialize hot reload if in development
          if (this.isDevelopment()) {
            this.init();
          }
        }

        isDevelopment() {
          return window.location.hostname === 'localhost' ||
            window.location.hostname === '127.0.0.1' ||
            window.location.hostname === '0.0.0.0';
        }

        init() {
          this.log('🔥 Azu Hot Reload initialized');
          this.connect();
          this.setupVisibilityHandling();
        }

        connect() {
          if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            return;
          }

          const wsUrl = `ws://${HOT_RELOAD_CONFIG.host}:${HOT_RELOAD_CONFIG.port}`;

          try {
            this.ws = new WebSocket(wsUrl);
            this.setupWebSocketHandlers();
          } catch (error) {
            this.log('❌ Failed to create WebSocket connection:', error);
            this.scheduleReconnect();
          }
        }

        setupWebSocketHandlers() {
          this.ws.onopen = () => {
            this.isConnected = true;
            this.reconnectAttempts = 0;
            this.log('✅ Hot reload connected');
            this.showNotification('🔥 Hot reload enabled', 'success');
          };

          this.ws.onclose = () => {
            this.isConnected = false;
            this.log('🔌 Hot reload disconnected');
            this.scheduleReconnect();
          };

          this.ws.onerror = (error) => {
            this.log('❌ WebSocket error:', error);
            this.isConnected = false;
          };

          this.ws.onmessage = (event) => {
            try {
              const message = JSON.parse(event.data);
              this.handleMessage(message);
            } catch (error) {
              this.log('❌ Error parsing message:', error);
            }
          };
        }

        handleMessage(message) {
          this.log('📨 Received message:', message);

          switch (message.type) {
            case 'full_reload':
              this.handleFullReload(message.data);
              break;
            case 'template_reload':
              this.handleTemplateReload(message.data);
              break;
            case 'static_reload':
              this.handleStaticReload(message.data);
              break;
            case 'build_error':
              this.handleBuildError(message.data);
              break;
            default:
              this.log('Unknown message type:', message.type);
          }
        }

        handleFullReload(data) {
          this.log('🔄 Full page reload triggered by:', data.file);
          this.showNotification('🔄 Reloading page...', 'info');

          // Small delay to show notification
          setTimeout(() => {
            window.location.reload();
          }, 100);
        }

        handleTemplateReload(data) {
          this.log('🎨 Template reload triggered by:', data.file);
          this.showNotification('🎨 Template updated', 'success');

          // For template changes, we'll do a full reload for now
          // In the future, this could be more sophisticated with partial updates
          setTimeout(() => {
            window.location.reload();
          }, 500);
        }

        handleStaticReload(data) {
          this.log('💄 Static file reload triggered by:', data.file);
          const fileExt = this.getFileExtension(data.file);

          switch (fileExt) {
            case 'css':
              this.reloadCSS();
              break;
            case 'js':
              this.reloadPage();
              break;
            default:
              this.reloadPage();
          }
        }

        handleBuildError(data) {
          this.log('❌ Build error:', data.error);
          this.showNotification('❌ Build failed - check console', 'error');
          console.error('Build Error:', data);
        }

        reloadCSS() {
          this.log('🎨 Reloading CSS...');
          this.showNotification('🎨 Styles updated', 'success');

          const links = document.querySelectorAll('link[rel="stylesheet"]');
          links.forEach(link => {
            const href = link.href;
            const url = new URL(href);
            url.searchParams.set('v', Date.now().toString());
            link.href = url.toString();
          });
        }

        reloadPage() {
          this.log('🔄 Reloading page...');
          this.showNotification('🔄 Reloading...', 'info');
          setTimeout(() => {
            window.location.reload();
          }, 100);
        }

        scheduleReconnect() {
          if (this.reconnectAttempts >= HOT_RELOAD_CONFIG.maxReconnectAttempts) {
            this.log('❌ Max reconnection attempts reached');
            this.showNotification('❌ Hot reload disconnected', 'error');
            return;
          }

          if (this.reconnectTimer) {
            clearTimeout(this.reconnectTimer);
          }

          this.reconnectAttempts++;
          this.log(`🔄 Reconnecting in ${HOT_RELOAD_CONFIG.reconnectInterval}ms (attempt ${this.reconnectAttempts})`);

          this.reconnectTimer = setTimeout(() => {
            this.connect();
          }, HOT_RELOAD_CONFIG.reconnectInterval);
        }

        setupVisibilityHandling() {
          // Reconnect when page becomes visible
          document.addEventListener('visibilitychange', () => {
            if (!document.hidden && !this.isConnected) {
              this.log('📱 Page visible, attempting to reconnect...');
              this.connect();
            }
          });

          // Reconnect when window regains focus
          window.addEventListener('focus', () => {
            if (!this.isConnected) {
              this.log('🎯 Window focused, attempting to reconnect...');
              this.connect();
            }
          });
        }

        showNotification(message, type = 'info') {
          // Only show notifications in development
          if (!this.isDevelopment()) return;

          // Remove existing notifications
          const existing = document.querySelector('.azu-hot-reload-notification');
          if (existing) {
            existing.remove();
          }

          // Create notification element
          const notification = document.createElement('div');
          notification.className = `azu-hot-reload-notification azu-notification-${type}`;
          notification.textContent = message;

          // Add styles
          Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            padding: '12px 16px',
            borderRadius: '8px',
            fontSize: '14px',
            fontWeight: '500',
            zIndex: '10000',
            fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif',
            boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease-in-out',
            maxWidth: '300px'
          });

          // Type-specific styling
          switch (type) {
            case 'success':
              Object.assign(notification.style, {
                backgroundColor: '#10b981',
                color: 'white'
              });
              break;
            case 'error':
              Object.assign(notification.style, {
                backgroundColor: '#ef4444',
                color: 'white'
              });
              break;
            case 'info':
            default:
              Object.assign(notification.style, {
                backgroundColor: '#3b82f6',
                color: 'white'
              });
          }

          // Add to page
          document.body.appendChild(notification);

          // Animate in
          setTimeout(() => {
            notification.style.transform = 'translateX(0)';
          }, 10);

          // Auto-remove after delay
          setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
              if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
              }
            }, 300);
          }, 3000);
        }

        getFileExtension(filename) {
          return filename.split('.').pop().toLowerCase();
        }

        log(...args) {
          if (HOT_RELOAD_CONFIG.debug || window.AZU_HOT_RELOAD_DEBUG) {
            console.log('[Azu Hot Reload]', ...args);
          }
        }
      }

      // Initialize hot reload client when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          window.azuHotReload = new AzuHotReloadClient();
        });
      } else {
        window.azuHotReload = new AzuHotReloadClient();
      }

      // Export for manual control
      window.AzuHotReload = AzuHotReloadClient;
    })();
  </script>
  {% endif %}
</body>

</html>
